dbGetQuery(con, paste0("select paperid, refid from refs where paperid in (",
paste(ID, collapse = ","), ")")) %>%
rename(Backward_References = refid, ID = paperid) %>%
select(Backward_References, ID) %>%
mutate(Backward_References = as.numeric(Backward_References))
}
# forward search (citations)
forward.search <- function(ID){
dbGetQuery(con, paste0("select paperid, refid from refs where refid in (",
paste(ID, collapse = ","), ")")) %>%
rename(ID = refid, Forward_Citations = paperid) %>%
select(ID, Forward_Citations) %>%
mutate(Forward_Citations = as.numeric(Forward_Citations))
}
# both search
snowball <- function(ID){
unique(c(backward.search(ID)$Backward_References, forward.search(ID)$Forward_Citations))
}
######################
## Scrape Functions ##
######################
# paper info
scrape <- function(ID){
article <- ma_evaluate(query = paste0('Id=', ID),
atts = c("Id", "Ti", "Y", "AA.AuN", "J.JN", "Pt", "RId", "CC", "DOI"))
if (nrow(article) != 0){select(article, -c('logprob', 'prob'))}
}
scrape.tidy <- function(IDs){
data <- tibble(Id = numeric(), Ti = character(), Pt = character(), DOI = character(), Y = numeric(),
CC = numeric(), RId = numeric(), AA = character(), J.JN = character())
for (ID in IDs) {
df <- scrape(ID)
df$RId <- ifelse(length(df$RId[[1]]) == 0, NA, length(df$RId[[1]]))
df$AA <-  paste(unique(unlist(df$AA)), collapse = ', ')
data <- bind_rows(data, df)
}
data %>%
rename(ID = Id, Title = Ti, Year = Y, Authors = AA, Journal = J.JN,
Pub_type = Pt, Citations = CC, References = RId) %>%
select(ID, Title, Year, Authors, Journal, Pub_type, DOI, Citations, References)
}
# abstract
## microsoft academic (MAG ID)
scrape.abst.ID <- function(IDs){
data <- tibble(Id = numeric(), abstract = character())
for (ID in IDs){data <- bind_rows(data, ma_abstract(query = paste0("Id=", ID)))}
data %>% rename(ID = Id, Abstract = abstract) %>%
mutate(Abstract = ifelse(Abstract == "", NA, str_remove(Abstract, "Abstract [NA ]*")))
}
## scopus (DOI)
scrape.abst.DOI <- function(DOIs){
abst <- NULL
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs){
ft <- tryCatch({ft <- ft_abstract(x = d, from = "scopus", scopusopts = opts)$scopus[[1]]},
error = function(cond){ft <- NULL})
if (is_null(ft)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = ft$doi, Abstract = ifelse(is_null(ft$abstract), NA, ft$abstract))}
data <- rbind(data, abst)
}
data
}
# local db search
fast.scrape <- function(ID){
res <- dbGetQuery(con, paste("select * from paper_info where PaperID in (", paste(ID, collapse = ", "), ")"))
res$DocType[is.na(res$DocType)] = "Unknown"
as_tibble(res) %>%
mutate(OriginalTitle = paste(paste0("[", DocType, "]"), OriginalTitle)) %>%
select(-DocType)
}
scrape.tidy(1928279026
)
scrape.tidy(1928279026
) -> x
x$DOI -> d
d
doi.search.tidy(d) -> a
a
scrape.abst.DOI(d)
scrape.abst.DOI(d) -> a
a$Abstract
scrape.tidy(2153258371
) -> x
x$DOI -> d
scrape.abst.DOI(d) -> a
a
a$Abstract
scrape.abst.ID(2153258371)
scrape.abst.ID(2153258371)$Abstract
ma_abstract(query = "Id=2153258371")
ma_abstract(query = "Id='2153258371'")
ma_abstract(query = "Id=2153258371")
ma_abstract(query = "Id=2153258371")$abstract
ma_abstract(query = "Id=2153258371", count = 2)
ma_abstract(query = "Id=2153258371", offset = 2)
ma_abstract(query = "Id=2153258371", offset = 1)
ma_abstract(query = "Id=2153258371", offset = 0)
ma_abstract(query = "Id=2153258371", model = 'beta-2015')
ma_abstract(query = "Id=2153258371", model = 'beta-2015')$abstract
getwd()
read_csv("Title_screen_fwd_bck_search_1_21_20.csv")
read_csv("Title_screen_fwd_bck_search_1_21_20.csv", col_names = FALSE)
read_csv("Title_screen_fwd_bck_search_1_21_20.csv", col_names = FALSE) -> df
df
df %>% select(-1) -> df
df
grepl(pattern = "he$", "he")
grepl(pattern = "he$", "she")
grepl(pattern = "he$", "se")
df %>% select(X12) -> a
a
a %>% rename(Abstract = X12)
a %>% rename(Abstract = X12) -> a
a$Abstract %>% grep(pattern = "...$")
a[a$Abstract %>% grep(pattern = "...$"),]
a
a[a$Abstract %>% grep(pattern = "...$"),]
a[a$Abstract %>% grep(pattern = "...$"),] %>% as_data_frame()
a[a$Abstract %>% grep(pattern = "...$"),] %>% as.data.frame()
a[a$Abstract %>% grep(pattern = "\u2026$"),]
a$Abstract %>% grep(pattern = "/\.{3}/$")
a$Abstract %>% grep(pattern = "\\.{3}$")
a$Abstract[4]
a$Abstract[6]
a$Abstract %>% grep(pattern = "[.]{3}$")
a[4,]
df[4,]
a[4,]
df[4,]
df[4,]$X4
df[4,]$X12
doi.search.tidy("10.1044/1092-4388(2002/093)")
scrape.abst.DOI("10.1044/1092-4388(2002/093)")
a$Abstract %>% grep(pattern = "[.]{3}$")
a$Abstract %>% grep(pattern = "[.]{3}$") %>% length
df$X12 %>% grep(pattern = "[.]{3}$")
df$X12 %>% grep(pattern = "[.]{3}$") -> miss
miss
df[miss,]
df[miss,]$X4 -> miss_ID
miss_ID
x <- scrape.tidy(miss_ID)
x
x %>% filter(!is.na(DOI))
x %>% filter(is.na(DOI))
x
x$DOI -> miss
miss
scrape.abst.DOI(miss) -> absts
absts
absts %>% filter(!is.na(Abstract))
absts %>% filter(is.na(Abstract))
scrape.abst.DOI("10.1044/1092-4388(2002/093)")
scrape.abst.DOI("10.1177/014272370102106101")
ft_abstract(x = "10.1177/014272370102106101", from = "scopus", scopusopts = opts)$scopus[[1]]}
ft_abstract(x = "10.1177/014272370102106101", from = "scopus", scopusopts = opts)$scopus[[1]]
ft_abstract(x = "10.1177/014272370102106101", from = "scopus", scopusopts = opts)
ft_abstract(x = "10.1177/014272370102106101", from = "plos")
ft_abstract(x = "10.1177/014272370102106101", from = "plos", verbose = TRUE)
rplos
library(rplos)
ft_abstract(x = "10.1177/014272370102106101", from = "plos")
ft_get("10.1177/014272370102106101")
ft_search(query = 'ecology', from = 'plos', limit = 4)
ft_search(query = 'neurobiology of dyslexia', from = 'plos', limit = 4)
ft_search(query = 'neurobiology of dyslexia', from = 'plos', limit = 4)$Returned
ft_search(query = 'neurobiology of dyslexia', from = 'plos', limit = 4)$returned
ft_abstract(x = "10.1177/014272370102106101")
ft_abstract(x = "10.1177/014272370102106101", from = "plos")
ft_abstract(x = "10.1044/jslhr.4006.1245", from = "plos")
traceback()
searchplos(q = paste0("id:10.1044/jslhr.4006.1245"), fl = "abstract")
full_text_urls("id:10.1044/jslhr.4006.1245")
full_text_urls(doi="id:10.1044/jslhr.4006.1245")
full_text_urls(doi="10.1044/jslhr.4006.1245")
rplos::plosabstract(q = "id:10.1044/jslhr.4006.1245")
rplos::plosabstract(q = "10.1111/j.1469-8749.1976.tb03682.x")
rplos::plosabstract(q = "10.1371/journal.pbio.2002050")
rplos::plosabstract(q = "/10.1371/journal.pbio.2002050")
plosabstract(q = "10.1371/journal.pbio.2002050", fl = 'abstract')
plosfields
plosabstract(q = "id:10.1371/journal.pbio.2002050", fl = 'abstract')
plosabstract(q = "id=10.1371/journal.pbio.2002050", fl = 'abstract')
plosabstract(q = "id=10.1371/journal.pbio.0040300", fl = 'abstract')
plosabstract(q = "doi=10.1371/journal.pbio.0040300", fl = 'abstract')
plosabstract(q = "doi:10.1371/journal.pbio.0040300", fl = 'abstract')
library(rcrossref)
cr_abstract("10.1371/journal.pbio.0040300")
cr_abstract("10.1177/014272370102106101")
cr_abstract("10.1371/journal.pbio.2002050")
cr_abstract(doi = "10.1371/journal.pbio.2002050")
cr_abstract(doi = '10.1109/TASC.2010.2088091')
cr_abstract(doi = '10.1371/journal.pbio.0040300')
x
cr_abstract(x$DOI) -> asd
cr_abstract(x$DOI[1])
cr_abstract(x$DOI[2])
cr_abstract(x$DOI[3])
cr_abstract(x$DOI[4])
cr_abstract(x$DOI[5])
cr_abstract(x$DOI[6])
cr_abstract(x$DOI[7])
for (doi in x$DOI) {cr_abstract(doi)}
######
for (doi in x$DOI) {
abst <- tryCatch({cr_abstract(doi)}, error = function(cond){abst <- NULL})
print(abst)
}
######
scrape.abst.DOI.cr <- function(DOIs) {
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs) {
abst <- tryCatch({cr_abstract(doi)}, error = function(cond){abst <- NULL})
if (is_null(abst)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = abst, Abstract = ifelse(is_null(abst), NA, abst))}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI.cr(x$DOI)
######
scrape.abst.DOI.cr <- function(DOIs) {
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs) {
abst <- tryCatch({cr_abstract(doi)}, error = function(cond){abst <- NULL})
if (is_null(abst)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = d, Abstract = ifelse(is_null(abst), NA, abst))}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI.cr(x$DOI) -> as
as
as %>% filter(!is.na(Abstract))
abst <- tryCatch({cr_abstract("10.1044/1092-4388(2002/093)")}, error = function(cond){abst <- NULL})
abst
######
scrape.abst.DOI.cr <- function(DOIs) {
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs) {
abst <- tryCatch({cr_abstract(doi)}, error = function(cond){abst <- NA})
if (is_null(abst)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = d, Abstract = abst)}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI.cr(x$DOI[1:5]) -> as
as
scrape.abst.DOI.cr("10.1044/1092-4388(2002/093)")
cr_abstract("10.1044/1092-4388(2002/093)")
scrape.abst.DOI.cr("10.1044/1092-4388(2002/093)") -> asd
asd %>% type()
asd %>% class()
asd[1]
asd
cr_abstract("10.1044/1092-4388(2002/093)") -> asd
asd %>% class()
asd
tibble(DOI = "hi", Abstract = asd)
###### CROSSREF
# library(rcrossref)
# cr_abstract("10.1044/1092-4388(2002/093)")
## TODO
scrape.abst.DOI.cr <- function(DOIs) {
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs) {
abst <- tryCatch({cr_abstract(doi)}, error = function(cond){abst <- NA})
print(abst)
if (is_null(abst)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = d, Abstract = abst)}
data <- rbind(data, abst)
}
data
}
cr_abstract(x$DOI[1:5])
x$DOI
cr_abstract(x$DOI[1])
scrape.abst.DOI.cr(x$DOI[1:5])
cr_abstract(x$DOI[1])
###### CROSSREF
# library(rcrossref)
# cr_abstract("10.1044/1092-4388(2002/093)")
## TODO
scrape.abst.DOI.cr <- function(DOIs) {
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs) {
abst <- tryCatch({abst <- cr_abstract(doi)}, error = function(cond){abst <- NA})
print(abst)
if (is_null(abst)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = d, Abstract = abst)}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI.cr(x$DOI[1:5])
###### CROSSREF
# library(rcrossref)
# cr_abstract("10.1044/1092-4388(2002/093)")
## TODO
scrape.abst.DOI.cr <- function(DOIs) {
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs) {
abst <- tryCatch({abst <- cr_abstract(doi)},
error = function(cond){abst <- NA})
print(abst)
if (is.na(abst)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = d, Abstract = abst)}
data <- rbind(data, abst)
}
data
}
###### CROSSREF
# library(rcrossref)
# cr_abstract("10.1044/1092-4388(2002/093)")
## TODO
scrape.abst.DOI.cr <- function(DOIs) {
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs) {
abst <- tryCatch({abst <- cr_abstract(d)},
error = function(cond){abst <- NA})
print(abst)
if (is.na(abst)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = d, Abstract = abst)}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI.cr(x$DOI[1:5])
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "scopus", scopusopts = opts)
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = c("scopus", "crossref"), scopusopts = opts)
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref", scopusopts = opts)
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref")
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref")$Crossref
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref")$crossref
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "plos")
scrape.abst.DOI.cr(x$DOI) -> x
x
str_squish(x[8,"Abstract"])
###### CROSSREF
# library(rcrossref)
# cr_abstract("10.1044/1092-4388(2002/093)")
# OR:: ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref")$crossref
## TODO
scrape.abst.DOI.cr <- function(DOIs) {
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs) {
abst <- tryCatch({abst <- cr_abstract(d)},
error = function(cond){abst <- NA})
print(abst)
if (is.na(abst)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = d, Abstract = str_squish(abst))}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI.cr(x$DOI) -> x
x
s = "wersgsgsgseetete..."
grep(x = s, pattern = "[.]{3}$")
grepl(x = s, pattern = "[.]{3}$")
s = "wersgsgsgseetete.."
grepl(x = s, pattern = "[.]{3}$")
x
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref")$crossref
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref")$crossref[[1]]
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref")$crossref[[1]]$abstract
## scopus (DOI)
scrape.abst.DOI <- function(DOIs){
abst <- NULL
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs){
ft <- tryCatch({ft <- ft_abstract(x = d, from = "scopus", scopusopts = opts)$scopus[[1]]},
error = function(cond){ft <- NULL})
if (is_null(ft)) {ft <- tryCatch({ft <- ft_abstract(x = d, from = "crossref")$crossref[[1]]},
error = function(cond){ft <- NULL})}
if (is_null(ft)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = ft$doi, Abstract = ifelse(is_null(ft$abstract), NA, ft$abstract))}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI("10.1044/1092-4388(2002/093)")
ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref")$crossref[[1]]
## scopus (DOI)
scrape.abst.DOI <- function(DOIs){
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs){
ft <- tryCatch({ft <- ft_abstract(x = d, from = "scopus", scopusopts = opts)$scopus[[1]]},
error = function(cond){ft <- NULL})
if (is_null(ft)) {ft <- tryCatch({ft <- ft_abstract(x = d, from = "crossref")$crossref[[1]]},
error = function(cond){ft <- NULL})}
#if (is_null(ft)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = ft$doi, Abstract = ifelse(is_null(ft$abstract), NA, ft$abstract))}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI("10.1044/1092-4388(2002/093)")
## scopus (DOI)
scrape.abst.DOI <- function(DOIs){
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs){
ft <- tryCatch({ft <- ft_abstract(x = d, from = "scopus", scopusopts = opts)$scopus[[1]]},
error = function(cond){ft <- NULL})
if (is_null(ft)) {ft <- tryCatch({ft <- ft_abstract(x = d, from = "crossref")$crossref[[1]]},
error = function(cond){ft <- NULL})}
print(ft)
#if (is_null(ft)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = ft$doi, Abstract = ifelse(is_null(ft$abstract), NA, ft$abstract))}
data <- rbind(data, abst)
}
data
}
## scopus (DOI)
scrape.abst.DOI <- function(DOIs){
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs){
ft <- tryCatch({ft <- ft_abstract(x = d, from = "scopus", scopusopts = opts)$scopus[[1]]},
error = function(cond){ft <- NULL})
if (is_null(ft)) {ft <- tryCatch({ft <- ft_abstract(x = d, from = "crossref")$crossref[[1]]},
error = function(cond){ft <- NULL})}
print(ft)
#if (is_null(ft)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = ft$doi, Abstract = ifelse(is_null(ft$abstract), NA, ft$abstract))}
data <- rbind(data, abst)
}
data
}
## scopus (DOI)
scrape.abst.DOI <- function(DOIs){
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs){
ft <- tryCatch({ft <- ft_abstract(x = d, from = "scopus", scopusopts = opts)$scopus[[1]]},
error = function(cond){ft <- NULL})
if (is_null(ft)) {ft <- tryCatch({ft <- ft_abstract(x = d, from = "crossref")$crossref[[1]]},
error = function(cond){ft <- NULL})}
#if (is_null(ft)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = ft$doi, Abstract = ifelse(is_null(ft$abstract), NA, ft$abstract))}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI("10.1044/1092-4388(2002/093)")
scrape.abst.DOI.cr("10.1044/1092-4388(2002/093)")
## scopus (DOI)
scrape.abst.DOI <- function(DOIs){
abst <- NULL
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs){
ft <- tryCatch({ft <- ft_abstract(x = d, from = "scopus", scopusopts = opts)$scopus[[1]]},
error = function(cond){ft <- NULL})
if (is_null(ft)) {abst <- scrape.abst.DOI.cr(d)}
else {abst <- tibble(DOI = ft$doi, Abstract = ifelse(is_null(ft$abstract), NA, ft$abstract))}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI("10.1044/1092-4388(2002/093)")
## TODO ##
# 1. direct to MAG link on click using ID if DOI not available
# --- #STILL DO ON APP.R
# 2. grepl match ellipsis and run scopus abstract fetch
# --- grepl(x = ..., pattern = "[.]{3}$")
#####
# library(rcrossref)
# cr_abstract("10.1044/1092-4388(2002/093)")
# OR:: ft_abstract(x = "10.1044/1092-4388(2002/093)", from = "crossref")$crossref
## TODO
scrape.abst.DOI.cr <- function(DOIs) {
data <- tibble(DOI = character(), Abstract = character())
for (d in DOIs) {
abst <- tryCatch({abst <- cr_abstract(d)},
error = function(cond){abst <- NA})
if (is.na(abst)) {abst <- tibble(DOI = d, Abstract = NA)}
else {abst <- tibble(DOI = d, Abstract = str_squish(abst))}
data <- rbind(data, abst)
}
data
}
scrape.abst.DOI.cr("10.1044/1092-4388(2002/093)")
x
x %>% filter(!is.na(Abstract))
s = "Abstracthello"
str_remove(s, "Abstract[ ]*[NA ]*")
s = "Abstract NA NA helo"
str_remove(s, "Abstract[ ]*[NA ]*")
s
str_remove(s, "^Abstract[ ]*[NA ]*")
s = "Abstract NA NA helo Abstract"
str_remove(s, "^Abstract[ ]*[NA ]*")
s = "NA NA NA"
str_remove_all(a, "NA ")
str_remove_all(s, "NA ")
s = "NA NA NA hello NANA"
str_remove_all(s, "NA ")
s = "NA NA NA hello BANANA na na"
str_remove_all(s, "NA ")
str_remove_all(s, " NA ")
s
str_remove_all(s, "[NA ]*")
s
str_remove_all(s, "[ NA ]*")
s
x
miss
miss_ID
scrape.abst.DOI(miss_ID[1])
scrape.abst.DOI(miss_ID[11])
scrape.abst.ID(miss_ID[11])
scrape.abst.ID(miss_ID[11]) %>% grepl(pattern = "[.]{3}$")
q()
